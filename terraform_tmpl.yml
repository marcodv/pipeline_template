# This file contains all the stages/jobs that can be 
# called/configured across all pipelines

# Run tf modules scan and 
# does not block the pipeline in case of failure
.module_security_scan:
  image:
    name: $AWS_INFRA_REGISTRY/tfsec:$TFSEC_VERSION
    entrypoint: [""]
  variables:
    PATH_TO_SCAN: ""
  after_script:
    - if [[ -z "$PATH_TO_SCAN" ]] ; then PATH_TO_SCAN="." ; fi
    - tfsec $PATH_TO_SCAN
  allow_failure: true

# Terraform image config 
# setup S3 backend
.terraform_s3_backend:
  image:
    name: $AWS_INFRA_REGISTRY/terraform:$TERRAFORM_VERSION
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  variables:
    AWS_PROFILE_ENV: ""
    MODULE_PATH_ENV: ""
  after_script:
    - export AWS_PROFILE=$AWS_PROFILE_ENV
    - cd $MODULE_PATH_ENV
    - echo "Printing files in dir $MODULE_PATH_ENV"
    - ls
    - terraform init
    - terraform plan -var-file=backend.tfvars
    - terraform apply -var-file=backend.tfvars -auto-approve

# Terraform image config 
# for usual Terraform modules
.terraform:
  image:
    name: $AWS_INFRA_REGISTRY/terraform:$TERRAFORM_VERSION
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  variables:
    AWS_PROFILE_ENV: ""
  before_script:
    - export AWS_PROFILE=$AWS_PROFILE_ENV

# Terraform-docs image
# used to create tf documentation
.terraform_docs:
  image:
    name: $TF_DURABLE_RESOURCE_REGISTRY/terraform-docs:$TERRAFORM_DOCS_VERSION

# This template TEST the build mkdocs process 
# with dependencies and later export the artifacts
.test_mkdocs_build:
  image: 
    name: python:3.8-buster
  before_script:
    - pip install mkdocs-material
    - pip install -r requirements.txt
    - mkdocs build --strict --verbose --site-dir tf_docs
  artifacts:
    paths:
      - tf_docs
  allow_failure: true

# This template build the Terraform docs
# and then export the documents as artifacts
.deploy_pages:
  image: 
    name: python:3.8-buster
  before_script:
    - pip install mkdocs-material
    - pip install -r requirements.txt
  after_script:
    - mkdocs build --strict --verbose
  artifacts:
    paths:
      - public
  allow_failure: true
